/*
							,?I7II=,
						III777777777777
					  7I777777777777777777
					=77777777777777777I7777
				   777777777777777777777+777:
				  7I77I777777I77777II7777=777?
				 ~777777777777777777+77777=777,
				 7=77=77I7777?=I77+I7+7777+=77?
				77777=7I+7777+I7I77+=I=7777+III+
				7=777=7++?777+I=~=~:==:?77??=II=
				7=77I=I=??II7++?~+=??~=~77I7=+7?:
			   :II7II~+==??I7+=+~=~+~==~I7II=~+?:
			   ?+77+?~==~==I?==?? ,,,,~:I7??=~=+=
			   ?~I7I?~~ ,,,:?~+77I:,:,+?77?++==I~
			   +~I7I+~~?~:+~I=I7777+,,?~77+=+=~I
			   +~?II+~?77+,?7+77777II77=I7++=~=
			   +~??7==~II77I7I77777II??II?+?~=~
			   =~+~+I+~~~?II77I==7777?~?I+~?
				 ~,=+=~~~:=~+7777II=?++?==:~
				   ~,?=~,::,,II7=77II??+~,?		 :::::,::::;														 ,:,,:::
					~ +=:~:=,77~,+III,?:::=~,		 :,													 :,			::,	  ::
					  :~~~~::77,~ 777=~:~~~~::		,,													:,,				 ,:
					  ~~~:::~7:,~::7:~ ,~~::~~~		:											  ::,					:,
					  ,~~:: 7::~~,:?7: :::::,,	   ,,	  ,:,				   ,	   ,  ,,,	  ,::,:,,:			  ,
					   : ,	=:~~~,::,: :,,,,:,	   :	:::::,	::,:,  ::,	  ,:::,,,:, ::::,,	 ::	 , ,,			:
						,::,,,::~:: ,, , ::::,	  ,		   ,:	::,	  ::  ,,  ,:  :,	   ,:	:,	   ,		   ,
						::,, ,::~~~,,,,,  :,:,,	  ,		,, ,,	,,	 ::	  ,	 ,:	  ,	 :	,, ,,	::	  ,			 :
					   :::?:,,,,: ,,,,:,:, ?I,,		   ,:,:::  ,,	  ,::,	 ,,	 :	 , ,:,,::  ::	  ,			,:::,,,
						?,:,,~,,::::::: :,, =+,													,	  ,
						+I, ::~,,:::::,,,,,,?=
					   ,,?I7::~~~:::::,,,:7?I,:
					  ::: +I::::::,::,7+II7~,::~
					  :: ,,::::::::::,,, ,:::,:~,
					 =:, :,::::::::~,,,:,,:::::, +
					 ,,,::,:::::::~:,,,:: :,,::,,:
					,,,,::,,:::::~:,,,,:: ,:,,:,,=
					,:::: :,:::~~::,,,:~:,~,::,: ~
					:::::,: ,,:~:,	,, ,,:~,:::,I
					 :+:,~ ::::~ ::~:: :,,:~ ~:7
					  :I::,,,~:~ ::~::,::,:~:~:
*/

//------------------------------------------------------------------------------
//以下のdefineは基本的に弄らないで下さい
//------------------------------------------------------------------------------
//チェイン
#globaldefine	CHAIN{{		{{CHAIN	/* どうも誤記される場合があるようなので */
#globaldefine	CHAIN}}		}}CHAIN	/* 同上 */
#globaldefine	{{CHAIN		{ switch CHAIN.Index {
#globaldefine	}}CHAIN		} CHAIN.Index++ }

#define			CHAIN_DELIM		':chain='

ERASEALLVARBEGINAS {
	_L= GETVARLIST(_argv[0])
	foreach _L;_V {
		ERASEVAR(_V)
	}
}
CALLALLFUNCTIONBEGINAS {
	_L= GETFUNCLIST(_argv[0])
	foreach _L;_V {
		void EVAL(_V)
	}
}
GETFUNCLISTINRE {
	_L= GETFUNCLIST
	_R=IARRAY
	foreach _L;_V {
		if RE_GREP(_V,_argv[0])
			_R,=_V
	}
	_R
}
CALLALLFUNCTIONINRE {
	_L= GETFUNCLIST
	foreach _L;_V {
		if RE_GREP(_V,_argv[0])
			EVAL(_V)
	}
}
ERASEALLVARINRE {
	_L= GETVARLIST
	foreach _L;_V {
		if RE_GREP(_V,_argv[0])
			ERASEVAR(_V)
	}
}
CALLSAORI {
	_argv[0] = 'SAORI_PATH\'+_argv[0]
	FUNCTIONEX(_argv)
}
ClearAyaTempVar {
	//保存する必要のない変数を削除

	//以下は保存
	//SHIORI_FW.ShellName
	//SHIORI_FW.ShellPath
	//SHIORI_FW.BalloonName
	//SHIORI_FW.BalloonPath
	//SHIORI_FW.DelayNotifyResults

	ERASEVAR('LOADED_FROM_MAGIC')
	ERASEVAR('array_eventtranslate')
	ERASEVAR('array_translateinternal')
	ERASEVAR('REQ.COMMAND')
	ERASEVAR('REQ.PROTOCOL')
	ERASEVAR('var.req.key')
	ERASEVAR('var.req.value')
	ERASEVAR('var.req.rawvalue')
	ERASEVAR('LIB.PROTOCOL')
	ERASEVAR('LIB.STATUSCODE')
	ERASEVAR('var.lib.key')
	ERASEVAR('var.lib.value')
	ERASEVAR('var.lib.result')
	ERASEVAR('SAORI.DllList')
	ERASEVAR('ghostexlist')
	ERASEVAR('ghostexcount')
	ERASEVAR('ghostname')
	ERASEVAR('selfname')
	ERASEVAR('sakuraname')
	ERASEVAR('keroname')
	ERASEVAR('basewarename')
	ERASEVAR('basewarenameex')
	ERASEVAR('sender')
	ERASEVAR('S_CHARSET')
	ERASEVAR('ghostpathlist')
	ERASEVAR('installedghostlist')
	ERASEVAR('installedsakuralist')
	ERASEVAR('installedkerolist')
	ERASEVAR('displaybpp')
	ERASEVAR('displaywidth')
	ERASEVAR('displayheight')
	ERASEVAR('displaypowerstatus')
	ERASEVAR('uniqueid')
	ERASEVAR('ghostboottime')
	ERASEVAR('ghostbootmin')
	ERASEVAR('status')
	ERASEVAR('res_reference')
	ERASEVAR('sakurahwnd')
	ERASEVAR('kerohwnd')
	ERASEVAR('sakurablnhwnd')
	ERASEVAR('keroblnhwnd')
	ERASEVAR('SHIORI_FW.Path')
	ERASEVAR('SHIORI_FW.Status')
	ERASEVAR('SHIORI_FW.LastAITalk')
	ERASEVAR('SHIORI_FW.LastAITalkTime')
	ERASEVAR('SHIORI_FW.LastTalk')
	ERASEVAR('SHIORI_FW.LastTalkTime')
	ERASEVAR('SHIORI_FW.TalkEndTime')
	ERASEVAR('SHIORI_FW.CanTalkFlag')
	ERASEVAR('SHIORI_FW.SaveVarCount')
	ERASEVAR('SHIORI_FW.LastSurface')
	ERASEVAR('SHIORI_FW.IsVisible')
	ERASEVAR('SHIORI_FW.HWnd')
	ERASEVAR('SHIORI_FW.HWndOld')
	ERASEVAR('SHIORI_FW.BalloonHWnd')
	ERASEVAR('SHIORI_FW.UniqueID')
	ERASEVAR('SHIORI_FW.SecurityLevel')
	ERASEVAR('SHIORI_FW.Eventid')
	ERASEVAR('SHIORI_FW.EventidTranslate')
	ERASEVAR('SHIORI_FW.DelayEventTime')
	ERASEVAR('SHIORI_FW.DelayEvent')
	ERASEVAR('SHIORI_FW.DelayEventReference')
	ERASEVAR('SHIORI_FW.GhostName')
	ERASEVAR('SHIORI_FW.ShellNameOld')
	ERASEVAR('SHIORI_FW.BalloonNameOld')
	ERASEVAR('SHIORI_FW.LastBootInEmergencyMode')
	ERASEVAR('SHIORI_FW.InVarFileMiss')
	ERASEVAR('SHIORI_FW.BasewareNotifysInstalledSakuraName')
	ERASEVAR('SHIORI_FW.BasewareNotifysInstalledKeroName')

	if SHIORI_FW.tempvarname
		ERASEVAR(SHIORI_FW.tempvarname)
	ERASEVAR('SHIORI_FW.tempvarname')

	SHIORI_FW.ClearChainVariable
	SHIORI_FW.ClearReferenceVariable
	SHIORI_FW.ClearValueexVariable
	SHIORI_FW.ClearAdditionalReturnVariable
	SHIORI_FW.ClearAlternateOutputVariable
}
//******************************************************************************
//load
//******************************************************************************

//------------------------------------------------------------------------------
//関数名：load
//機能　：ロード時の処理
//------------------------------------------------------------------------------
load {
	//文字/文字列定数
	C_LF = CHR(0xa)			/*lin换行*/
	C_CR = CHR(0xd)			/*mac换行*/
	C_CRLF = CHR(0xd,0xa)	/*win换行*/
	C_CRLF2 = C_CRLF+C_CRLF
	C_BYTE1 = CHR(0x1)
	BOM_UTF8 = CHR(0xef,0xbb,0xbf)

	SHIORI_FW.LastBootInEmergencyMode = SHIORI_FW.EmergencyMode
	SHIORI_FW.EmergencyMode = GETSETTING('coreinfo.mode') == 'emergency'

	REQ.COMMAND		= 'LOAD'
	REQ.PROTOCOL	= 'AYA/5.0'
	var.req.key		= (IARRAY, 'Path')
	var.req.value	= (IARRAY, _argv[0])
	var.req.rawvalue= (IARRAY,_argv[0])

	SHIORI_FW.Path = _argv[0]

	var.lib.key = IARRAY
	var.lib.value = IARRAY
	var.lib.result = ''

	//初回起動時の初期化
	if !ISVAR('aitalkinterval') {
		aitalkinterval = TALK_INTERVAL
	}
	if !ISVAR('ghostupmin_last') {
		ghostupmin_last = 0
	}

	//毎回起動時の初期化
	SHIORI_FW.ResetAITalkInterval

	_sec = GETSECCOUNT

	SHIORI_FW.SaveVarCount	= 0
	SHIORI_FW.LastTalk		= ''
	SHIORI_FW.LastTalkTime	= _sec
	SHIORI_FW.LastAITalk	= ''
	SHIORI_FW.LastAITalkTime= _sec
	SHIORI_FW.TalkEndTime	= _sec
	SHIORI_FW.LastSurface	= (0,10)
	SHIORI_FW.IsVisible		= (1,1)
	SHIORI_FW.HWnd			= (0,0)
	SHIORI_FW.HWndOld		= (0,0)
	SHIORI_FW.BalloonHWnd	= (0,0)
	SHIORI_FW.UniqueID		= ''
	SHIORI_FW.CanTalkFlag	= 1
	SHIORI_FW.DelayNotifyResults	= IARRAY

	SAORI.DllList		 = IARRAY
	basewarename		 = ''
	basewarenameex		 = ''
	sender				 = ''

	S_CHARSET = GETSETTING('charset.output')

	status = ''
	SHIORI_FW.tempvarname = IARRAY

	array_eventtranslate = ASORT('string,ascending',GETFUNCLIST('OnGhostEventTranslate'))
	array_translateinternal = ASORT('string,ascending',GETFUNCLIST('OnTranslateInternal'))

	if !username {
		MAGICLOAD
		foreach _OLD_SAVE_FILES_;_i{
			if FILEEXIST(_i){
				LOADVAR(_i)
				FDEL(_i)
			}
		}
		SAVEVAR
		if !username
			SHIORI_FW.InVarFileMiss=1
	}
	ghostboottime		 = systemuptime
	ghostbootmin		 = GETSECCOUNT / 60

	SHIORI_FW.InitChain

	SHIORI_FW.SetDelayEvent('',0)

	CALLALLFUNCTIONBEGINAS('Init.')

	if SHIORI_FW.EmergencyMode
		SHIORI_FW.PushNoBreakNotifyResult('\![raise,OnEmergencyMode]')
	elseif FILEEXIST('SHIORI_PATH\SHIORI_NAME_emerg.txt'){
		foreach _DIC_DIRS_; _dir{
			void DIRSync(_dir,'EMERGENCYMODEDICDIR'+'\'+_dir)
		}
		if SHIORI_FW.LastBootInEmergencyMode
			SHIORI_FW.PushNoBreakNotifyResult('\![raise,OnEmergencyModeEnd]')
	}
}

//******************************************************************************
//unload
//******************************************************************************

//------------------------------------------------------------------------------
//関数名：unload
//機能　：終了処理
//------------------------------------------------------------------------------
unload {
	REQ.COMMAND		 = 'UNLOAD'
	REQ.PROTOCOL	 = 'AYA/5.0'
	var.req.key		 = IARRAY
	var.req.value	 = IARRAY
	var.req.rawvalue = IARRAY

	ghostupmin_last = MAX(ghostupmin_total,elapsedtimetotal)

	CALLALLFUNCTIONBEGINAS('Fin.')

	//保存する必要のない変数を削除
	ClearAyaTempVar

	SHIORI_FW.ClearChainVariable
	SHIORI_FW.ClearReferenceVariable
	SHIORI_FW.ClearValueexVariable

	ERASEVAR('C_LF')
	ERASEVAR('C_CR')
	ERASEVAR('C_CRLF')
	ERASEVAR('C_CRLF2')
	ERASEVAR('C_BYTE1')
	ERASEVAR('BOM_UTF8')
}

//******************************************************************************
//request
//******************************************************************************
//------------------------------------------------------------------------------
//関数名：request
//機能　：受け取った文字列をSHIORIリクエストヘッダとして解析した後、
//OnRequestを活性化します
//------------------------------------------------------------------------------
request {
	_reqdata = _argv[0]
	_linestart = 0
	_lineend = STRSTR(_reqdata, C_CRLF, _linestart)

	if _lineend <= 0 {
		//1行目すらない！
		SHIORI_FW.MakeBadResponse
		return
	}
	_lin = SUBSTR(_reqdata,_linestart,(_lineend - _linestart))

	//リクエスト種別とプロトコル名の取得　エラーなら400
	REQ.COMMAND = _lin[0,' SHIORI']
	REQ.PROTOCOL = 'SHIORI' + _lin[1,' SHIORI']

	//リクエストヘッダの取得
	var.req.key		= IARRAY
	var.req.value	= IARRAY
	var.req.rawvalue= IARRAY

	status = ''
	SHIORI_FW.Eventid=''
	SHIORI_FW.SecurityLevel='local'//互換性のためデフォルトはlocal

	while _lineend > _linestart {
		//行分割
		_linestart = _lineend + 2
		_lineend = STRSTR(_reqdata, C_CRLF, _linestart)

		//空行もしくはみつからなかった
		if _lineend <= _linestart {
			break
		}

		_lin = SUBSTR(_reqdata,_linestart,(_lineend - _linestart))

		//キーと値を取得
		_len = STRLEN(_lin)
		_pos = STRSTR(_lin,': ',0)
		var.req.key ,= (_key = SUBSTR(_lin,0,_pos))
		_value	 = SUBSTR(_lin,(_pos + 2),(_len - _pos - 2))

		if var.req.key == '' {
			break
		}

		//イベントID名称を取得
		if _key == 'Charset' {
			if S_CHARSET != _value {
				void SETSETTING('charset.output',_value)
				S_CHARSET = _value
			}
		}
		elseif _key == 'ID' {
			//取得　名前先頭が'On'でないなら付加
			SHIORI_FW.Eventid = _value
			if SUBSTR(SHIORI_FW.Eventid, 0, 2) != 'On'
				SHIORI_FW.Eventid = 'On_' + SHIORI_FW.Eventid
		}
		//セキュリティレベル
		elseif _key == 'SecurityLevel' {
			SHIORI_FW.SecurityLevel = _value
		}
		//ベースウェア名取得
		elseif _key == 'Sender' {
			if basewarenameex == '' {
				basewarenameex = _value
			}
			basewarename = _value
			sender = _value
		}
		//Status
		elseif _key == 'Status' {
			status = _value
		}

		//キーと値を記憶
		var.req.rawvalue ,= _value

		if SHIORI_FW.AUTO_DATA_CONVERT {
			if ISINTSTR(_value)
				var.req.value ,= TOINT(_value)
			elseif ISREALSTR(_value)
				var.req.value ,= TOREAL(_value)
			else
				var.req.value ,= REPLACE(_value, C_BYTE1, ',')
		}
		else {
			var.req.value ,= TOAUTOEX(_value)
		}
	}

	if TOLOWER(SHIORI_FW.SecurityLevel) == 'external'
		SHIORI_FW.Eventid = 'ExternalEvent.'+SHIORI_FW.Eventid

	SHIORI_FW.EventidTranslate = SHIORI_FW.TranslateEvent(SHIORI_FW.Eventid)

	//ハンドラが無い場合は即返る
	if !ISFUNC(SHIORI_FW.EventidTranslate) && !SHIORI_FW.IsImportantEvent {
		SHIORI_FW.NoMatchingEvent
		return
	}

	OnRequest
}

SHIORI_FW.NoMatchingEvent{
	SHIORI_FW.PushNoBreakNotifyResult(OnNoMatchingEvent)
	SHIORI_FW.MakeBadResponse
}

SHIORI_FW.PushNotifyResult:void{//Notify返回值积压
	if _argv[0]
		SHIORI_FW.DelayNotifyResults,=_argv[0]
}
SHIORI_FW.PushNoBreakNotifyResult:void{//Notify返回值积压，并保证执行时不会被中断
	if _argv[0]
		SHIORI_FW.PushNotifyResult('\t'+_argv[0])
}
SHIORI_FW.PushNotifyResultToTop:void{//Notify返回值积压，但是优先级最高
	if _argv[0]
		SHIORI_FW.DelayNotifyResults=(_argv[0],SHIORI_FW.DelayNotifyResults)
}
SHIORI_FW.PushNoBreakNotifyResultToTop:void{//Notify返回值积压，但是优先级最高并保证执行时不会被中断
	if _argv[0]
		SHIORI_FW.PushNotifyResultToTop('\t'+_argv[0])
}
SHIORI_FW.ClearNotifyResult:void{
	SHIORI_FW.DelayNotifyResults = IARRAY
}
SHIORI_FW.TranslateEvent {
	_result = _argv[0]
	_as = ARRAYSIZE(array_eventtranslate)
	if _as > 0 {
		_ev = ''
		for _i = 0 ; _i < _as ; _i++ {
			void EVAL("_ev = %(array_eventtranslate[_i])(_result)")
			if STRLEN(_ev) > 0 {
				_result = _ev
			}
		}
	}
	_result
}

//------------------------------------------------------------------------------
//関数名：OnRequest
//機能　：受け取ったリクエストに応じた処理を行います
//------------------------------------------------------------------------------
OnRequest {
	//コマンド別に処理分岐
	SHIORI_FW.MakeResponse(SHIORI_FW.RaiseIDEvent)
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.MakeResponse
//機能　：パラメータに応じて適切な応答文字列を作成します。by steve02081504
//引数　：_argv[0]
//------------------------------------------------------------------------------
SHIORI_FW.MakeResponse{
	//コマンド別に処理分岐
	_result = _argv[0]
	case REQ.COMMAND {
		when 'NOTIFY' {
			//NOTIFYリクエスト
			if _result && 'minimizing' !_in_ status
				SHIORI_FW.DelayNotifyResults,=_result//Notify返回值积压
			if SHIORI_FW.DebugMode && _result{
				"SHIORI/3.0 200 OK%(C_CRLF)Charset: %(S_CHARSET)%(C_CRLF)/
				ValueForDebug: %(_result)%(C_CRLF)"
			}else{
				"SHIORI/3.0 204 No Content%(C_CRLF)Charset: %(S_CHARSET)%(C_CRLF)"
			}
		}
		when 'GET' {
			//GETリクエスト
			if _result || SHIORI_FW.HasAdditionalReturn{
				"SHIORI/3.0 200 OK%(C_CRLF)Sender: AYA%(C_CRLF)Charset: %(S_CHARSET)%(C_CRLF)"
				--
				if _result
					"Value: %(_result)%(C_CRLF)"
				--
				SHIORI_FW.AssembleReferenceHeader
			}
			elseif SHIORI_FW.HasAlternateOutput{
				SHIORI_FW.MakeResponse(SHIORI_FW.GetAlternateOutput)
				return
			}
			else{
				if SHIORI_FW.DelayNotifyResults[0] && SHIORI_FW.Eventid == 'OnSecondChange'{//在空OnSecondChange环境下返回积压的Notify
					_result = SHIORI_FW.DelayNotifyResults[0]
					SHIORI_FW.DelayNotifyResults[0] = IARRAY
					SHIORI_FW.MakeResponse(_result)
					return
				}else{
					SHIORI_FW.MakeEmptyResponse
					return
				}
			}
		}
		others
			//未知のリクエスト
			SHIORI_FW.MakeBadResponse.OneCRLF
	}
	--
	SHIORI_FW.GetAdditionalReturns
	--
	C_CRLF
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.Make_X_SSTP_PassThru
//機能　：X-SSTP-PassThruヘッダを追加します (設定はリクエストごとにリセットされます)
//引数　：_argv[0] ヘッダ名  _argv[1~inf] 値
//------------------------------------------------------------------------------
SHIORI_FW.Make_X_SSTP_PassThru:void{
	_argv[0]='X-SSTP-PassThru-'+_argv[0]
	SHIORI_FW.MakeAdditionalReturn(_argv)
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.HasAdditionalReturn
//機能　：ヘッダを追加されているか確認します。
//------------------------------------------------------------------------------
SHIORI_FW.HasAdditionalReturn{
	SHIORI_FW.AdditionalReturn.String
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.MakeAdditionalReturn
//機能　：ヘッダを追加します (設定はリクエストごとにリセットされます)
//引数　：_argv[0] ヘッダ名  _argv[1~inf] 値
//------------------------------------------------------------------------------
SHIORI_FW.MakeAdditionalReturn:void{
	_key=_argv[0]+': '
	_argv[0]=IARRAY
	SHIORI_FW.AdditionalReturn.String += _key+TOSTR(_argv)+C_CRLF
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.MakeValueNotify
//機能　：ヘッダをValueNotify追加します (設定はリクエストごとにリセットされます)
//引数　：_argv[0~inf] 値
//------------------------------------------------------------------------------
SHIORI_FW.MakeValueNotify:void{
	SHIORI_FW.MakeAdditionalReturn('ValueNotify',_argv)
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.ClearAdditionalReturnVariable
//機能　：追加ヘッダ用変数を削除します
//------------------------------------------------------------------------------
SHIORI_FW.ClearAdditionalReturnVariable:void{
	ERASEVAR('SHIORI_FW.AdditionalReturn.String')
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.GetAdditionalReturns
//機能　：追加ヘッダを展開します
//返値　：追加すべきヘッダ文字列 最後は必ず改行で終わる
//------------------------------------------------------------------------------
SHIORI_FW.GetAdditionalReturns{
	_t=SHIORI_FW.AdditionalReturn.String
	SHIORI_FW.AdditionalReturn.String = ''
	_t
}
//erb相关
SHIORI_FW.HasAlternateOutput{
	SHIORI_FW.AlternateOutput.String
}
SHIORI_FW.GetAlternateOutput{
	_t=SHIORI_FW.AlternateOutput.String
	SHIORI_FW.AlternateOutput.String=''
	_t
}
SHIORI_FW.ClearAlternateOutputVariable:void{
	ERASEVAR('SHIORI_FW.AlternateOutput.String')
}
SHIORI_FW.ClearAlternateOutput:void{
	SHIORI_FW.ClearAlternateOutputVariable
}
SHIORI_FW.Print:void{
	SHIORI_FW.AlternateOutput.String+=TOSTR(_argv)
}
SHIORI_FW.PrintLine:void{
	SHIORI_FW.AlternateOutput.String+=TOSTR(_argv)+'\n'
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.AssembleReferenceHeader
//機能　：res_reference*変数を順次検査して返送用のReference文字列を作成します
//------------------------------------------------------------------------------
SHIORI_FW.AssembleReferenceHeader {
	_result = ''
	_before = ''

	_r = GETTYPEEX('res_reference')

	if _r {
		if _r == 4 {
			_n = ARRAYSIZE(res_reference)
			for _i = 0 ; _i < _n ; _i++ {
				_result += "Reference%(_i): %(res_reference[_i])%(C_CRLF)"
			}
		}
		else {
			_result += "Reference0: %(res_reference)%(C_CRLF)"
		}
		ERASEVAR('res_reference')
	}
	else {
		_value = ''
		for _i = 0; _i < SHIORI_FW.RES_REF_MAX; _i++ {
			_before = _value

			_varname = 'res_reference' + _i
			_value = EVAL(_varname)
			if _value != '' {
				_result += "Reference%(_i): %(_value)%(C_CRLF)"
				ERASEVAR(_varname)
			}
			else {
				if _before == ''; break
			}
		}
	}

	_result
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.IsImportantEvent
//機能　：絶対に通知すべきイベントを識別します
//引数　：_argv[0] (本当の)イベント名
//------------------------------------------------------------------------------
SHIORI_FW.IsImportantEvent {
	if SHIORI_FW.Eventid == 'OnSecondChange' {
		1
		return
	}
	elseif ISFUNC('SHIORI_EV.' + SHIORI_FW.Eventid) {
		1
		return
	}
	0
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.RaiseIDEvent
//機能　：指定された名前の関数を実行して結果を取得します
//------------------------------------------------------------------------------
SHIORI_FW.RaiseIDEvent {
	//reference&PassThru_Ins 変数を作成
	SHIORI_FW.MakeReferenceAndPassThruInsVariable

	_event = SHIORI_FW.EventidTranslate
	_event_fallback = _event

	_result_internal = ''

	if SHIORI_FW.Eventid == 'OnSecondChange' {
		//OnSecondChangeならランダムトーク関連処理
		_event = SHIORI_FW.ControlAITalk(_event)
		_event = SHIORI_FW.TranslateEvent(_event)
	}

	if _event != 'OnSecondChange' {
		if ISFUNC('SHIORI_EV.' + _event) {
			_result_internal = TOSTR(EVAL('SHIORI_EV.' + _event))
		}
	}

	_can_talk = SHIORI_FW.CanTalk
	if _can_talk != SHIORI_FW.CanTalkFlag {
		if _can_talk {
			SHIORI_FW.TalkEndTime = GETSECCOUNT
		}
		SHIORI_FW.CanTalkFlag = _can_talk
	}

	//イベント活性化
	_result = ''
	if ISFUNC(_event) {
		_result = TOSTR(EVAL(_event))
	}
	if _result == '' {
		if _event != _event_fallback {
			if ISFUNC(_event_fallback) {
				_result = TOSTR(EVAL(_event_fallback))
			}
		}
	}
	if _result == '' {
		_result = _result_internal
	}

	if _result != '' {//トークあり
		//遅延EVAL
		_talk = RE_SPLIT(_result,'(' + CHAIN_DELIM + ')')
		_delim = RE_GETSTR
		_n = ARRAYSIZE(_delim)

		//先に内部トランスレート
		if SHIORI_FW.Eventid != 'OnTranslate' {
			_as = ARRAYSIZE(array_translateinternal)
			if _as >= 1 {
				_tk = ''
				for _i = 0 ; _i < _as ; _i++ {
					void EVAL("_tk = %(array_translateinternal[_i])(_talk[0])")
					if STRLEN(_tk) > 0 {
						_talk[0] = _tk
					}
				}
			}
		}

		//後から遅延設定
		for _i = 0 ; _i < _n ; _i += 1 {
			if _delim[_i] == CHAIN_DELIM {
				//チェイン処理
				SHIORI_FW.StartChainTalk(_talk[_i + 1])
			}
		}

		if _talk[0] != '' {
			if SHIORI_FW.Status != 'Run' {
				SHIORI_FW.Status = 'Run'
			}
			SHIORI_FW.LastTalk = _talk[0]
			if _event == 'OnAITalk' {
				SHIORI_FW.LastAITalk = _talk[0]
				SHIORI_FW.ResetAITalkInterval
			}
			if 'Surface' !_in_ _event {
				if SHIORI_FW.RemoveAllTags(_talk[0]) != '' {
					SHIORI_FW.LastTalkTime = GETSECCOUNT
				}
			}
			_talk[0]
		}
	}
	else {//トークなし
		if _event == 'OnAITalk' {
			SHIORI_FW.LastAITalk = ''
			SHIORI_FW.ResetAITalkInterval
		}
	}

	//reference&PassThru_Ins 変数をクリア
	SHIORI_FW.ClearReferenceAndPassThruInsVariable
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.MakeEmptyResponse
//機能　：204を返してはいけないリクエストを判定して、
//適正な応答文字列を作成します
//引数　：_argv[0] イベント名
//------------------------------------------------------------------------------
SHIORI_FW.MakeBadResponse{SHIORI_FW.MakeBadResponse.OneCRLF+C_CRLF}
SHIORI_FW.MakeBadResponse.OneCRLF {
	'SHIORI/3.0 400 Bad Request'+C_CRLF
}
SHIORI_FW.MakeEmptyResponse{SHIORI_FW.MakeEmptyResponse.OneCRLF+C_CRLF}
SHIORI_FW.MakeEmptyResponse.OneCRLF {
	case SHIORI_FW.Eventid {
		when 'OnFirstBoot', 'OnGhostChanged'
			SHIORI_FW.MakeEmptyResponse.OneCRLF.BootEvent
		when 'OnBoot', 'OnWindowStateRestore'
			SHIORI_FW.MakeEmptyResponse.OneCRLF.SurfaceReset
		when 'OnClose'
			//終了指示を出す必要があるイベント
			SHIORI_FW.MakeEmptyResponse.OneCRLF.WithSakura('\0\-\e')
		others
			//上記以外では204を返送して良い
			SHIORI_FW.MakeEmptyResponse.OneCRLF.Default
	}
}
SHIORI_FW.MakeEmptyResponse.OneCRLF.Default{"SHIORI/3.0 204 No Content%(C_CRLF)Charset: %(S_CHARSET)%(C_CRLF)"}
SHIORI_FW.MakeEmptyResponse.OneCRLF.WithSakura{
	"SHIORI/3.0 200 OK%(C_CRLF)Sender: AYA%(C_CRLF)Charset: %(S_CHARSET)%(C_CRLF)/
	Value: %(_argv[0])%(C_CRLF)"
}
SHIORI_FW.MakeEmptyResponse.OneCRLF.SurfaceReset{
	//スコープ0/1の基本サーフィスを出す必要があるイベント
	SHIORI_FW.MakeEmptyResponse.OneCRLF.WithSakura('\0\s[0]\1\s[10]\e')
}
SHIORI_FW.MakeEmptyResponse.OneCRLF.BootEvent{
	if ISFUNC(SHIORI_FW.TranslateEvent('OnBoot'))
		//SSP側でフォールバックするのでここでは204を返す
		SHIORI_FW.MakeEmptyResponse.OneCRLF.Default
	else
		SHIORI_FW.MakeEmptyResponse.OneCRLF.SurfaceReset
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.ResetAITalkInterval
//機能　：AIトーク発動処理カウンタのリセット
//------------------------------------------------------------------------------
SHIORI_FW.ResetAITalkInterval {
	SHIORI_FW.LastAITalkTime = GETSECCOUNT
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.ControlAITalk
//機能　：AIトーク発動処理、変数データの自動保存処理
//引数　：_argv[0] イベント名
//------------------------------------------------------------------------------
SHIORI_FW.ControlAITalk {
	_return_value = _argv[0]

	if TOINT(reference[3]) {//喋れる
		if SHIORI_FW.DelayEventTime {
			SHIORI_FW.DelayEventTime--

			if SHIORI_FW.DelayEventTime <= 0 {
				_return_value = SHIORI_FW.DelayEvent
				if ARRAYSIZE(SHIORI_FW.DelayEventReference) {
					reference = SHIORI_FW.DelayEventReference
				}
			}
		}
		if aitalkinterval > 0 {//トーク間隔が非0
			_diff = GETSECCOUNT - SHIORI_FW.LastAITalkTime
			if _diff >= aitalkinterval {//トーク間隔の設定時間を越えた
				if SHIORI_FW.CanTalk {
					_return_value = 'OnAITalk'
				}
			}
		}
	}

	SHIORI_FW.SaveVarCount++
	if SHIORI_FW.SaveVarCount > 1800 {
		SHIORI_FW.SaveVarCount = 0
		SAVEVAR('SAVE_FILE')
	}

	_return_value
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.SetDelayEvent/GetDelayEvent
//機能　：「遅れて喋る」イベントの登録/取得
//引数　：_argv[0] イベント _argv[1] 遅れsec.
//------------------------------------------------------------------------------
SHIORI_FW.SetDelayEvent : void {
	if STRLEN(_argv[0]) && _argv[1] {
		SHIORI_FW.DelayEventTime = TOINT(_argv[1])
		SHIORI_FW.DelayEvent = _argv[0]
		SHIORI_FW.DelayEventReference = _argv[2,100]//範囲外は削られるのでこれでOK
	}
	else {
		SHIORI_FW.DelayEventTime = 0
		SHIORI_FW.DelayEvent = ''
		SHIORI_FW.DelayEventReference = IARRAY
	}
}
SHIORI_FW.GetDelayEvent {
	(SHIORI_FW.DelayEvent,SHIORI_FW.DelayEventTime,SHIORI_FW.DelayEventReference)
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.MakeReferenceAndPassThruInsVariable
//機能　：Reference*ヘッダからreference*変数を作成します
//		  PassThru_Ins.*変数を作成
//------------------------------------------------------------------------------
SHIORI_FW.MakeReferenceAndPassThruInsVariable : void {
	SHIORI_FW.ReferenceList = IARRAY
	SHIORI_FW.PassThru_Ins_List = IARRAY
	reference = IARRAY
	reference.raw = IARRAY
	_sz = ARRAYSIZE(var.req.key)

	for _i = 0; _i < _sz; _i++ {
		if SUBSTR(_keyname = var.req.key[_i], 0, 9) == 'Reference' {
			_refnum = TOINT(SUBSTR(_keyname, 9, 3))
			_value = var.req.value[_i]
			reference[_refnum] = _value
			reference.raw[_refnum] = var.req.rawvalue[_i]

			if !SHIORI_FW.REF_ACCEL {//1にすると高速化
				_varname = 'reference'+_refnum
				LETTONAME(_varname, _value)
				SHIORI_FW.ReferenceList ,= _varname
			}
		}
		elseif SUBSTR(_keyname = var.req.key[_i], 0, 16) == 'X-SSTP-PassThru-' {
			_PassThru_Ins_Name = SUBSTR(_keyname, 9, STRLEN(_keyname))
			_value = var.req.value[_i]

			_varname = 'PassThru_Ins.'+_PassThru_Ins_Name
			LETTONAME(_varname, _value)
			SHIORI_FW.PassThru_Ins_List ,= _varname
		}
	}
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.ClearReferenceAndPassThruInsVariable
//機能　：reference*&PassThru_Ins.*変数を削除します
//------------------------------------------------------------------------------
SHIORI_FW.ClearReferenceAndPassThruInsVariable : void {
	foreach SHIORI_FW.ReferenceList; _refname { ERASEVAR(_refname) }
	ERASEVAR('SHIORI_FW.ReferenceList')
	ERASEVAR('reference','reference.raw')
	foreach SHIORI_FW.PassThru_Ins_List; _refname { ERASEVAR(_refname) }
	ERASEVAR('SHIORI_FW.PassThru_Ins_List')
}
//******************************************************************************
//チェイン制御
//******************************************************************************
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.InitChain
//機能　：初期化
//------------------------------------------------------------------------------
SHIORI_FW.InitChain {
	CHAIN.IDName = ''
	CHAIN.Script = ''
	CHAIN.Index = 0
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.StartChainTalk
//機能　：チェイン情報を解析してチェイン処理を開始します
//引数　：_argv[0] イベントID
//------------------------------------------------------------------------------
SHIORI_FW.StartChainTalk {
	//チェイン名が無いなら何もしない
	if _argv[0] == ''; return

	//チェイン強制終了処理
	if _argv[0] == 'end' {
		SHIORI_FW.EndChainTalk
	}
	//新たにチェイン開始
	else {
		CHAIN.IDName = _argv[0]
		CHAIN.Script = ''
		CHAIN.Index = 0
		CHAIN.StartTime = GETSECCOUNT
	}
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.StartChainTalkScriptDirect
//機能　：直接次のチェインのスクリプトを指定します
//引数　：_argv[0] スクリプト
//------------------------------------------------------------------------------
SHIORI_FW.StartChainTalkScriptDirect {
	//チェイン強制終了処理
	if _argv[0] == '' {
		SHIORI_FW.EndChainTalk
	}
	//新たにチェイン開始
	else {
		CHAIN.IDName = ''
		CHAIN.Script = _argv[0]
		CHAIN.Index = 0
		CHAIN.StartTime = GETSECCOUNT
	}
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.IsChain
//機能　：チェイン中かどうかを返します
//------------------------------------------------------------------------------
SHIORI_FW.IsChain {
	if CHAIN.Script != '' {
		1
		return
	}
	if CHAIN.IDName != '' {
		1
		return
	}
	0
	return
}

//------------------------------------------------------------------------------
//関数名：ChainTalk
//機能　：チェイン処理　OnAITalkから実行されます
//------------------------------------------------------------------------------
ChainTalk {
	if CHAIN.IDName != '' {
		_res = EVAL(CHAIN.IDName)
		if _res != '' {
			_res
			return
		}
	}

	if CHAIN.Script != '' {
		_res = CHAIN.Script
		CHAIN.Script = ''
		_res
		return
	}

	SHIORI_FW.EndChainTalk
	RandomTalk
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.EndChainTalk
//機能　：チェインを終了します
//------------------------------------------------------------------------------
SHIORI_FW.EndChainTalk {
	CHAIN.IDName = ''
	CHAIN.Script = ''
	CHAIN.StartTime = 0
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.ChainTime
//機能　：チェイン中の時間を取得します
//------------------------------------------------------------------------------
SHIORI_FW.ChainTime {
	if CHAIN.StartTime {
		GETSECCOUNT - TOINT(CHAIN.StartTime)
	}
	else {
		0
	}
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.ClearChainVariable
//機能　：チェイン制御用の変数を消去します
//------------------------------------------------------------------------------
SHIORI_FW.ClearChainVariable {
	ERASEVAR('CHAIN.IDName')
	ERASEVAR('CHAIN.Index' )
	ERASEVAR('CHAIN.Script' )
	ERASEVAR('CHAIN.StartTime' )
}

//******************************************************************************
//ネットワーク更新後にできた dl2 ファイルに関する処置
//******************************************************************************
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.Dl2ToDll
//機能　：処理の開始
//------------------------------------------------------------------------------
SHIORI_FW.Dl2ToDll {
	SHIORI_FW.ExecuteDl2ToDll('')
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.ExecuteDl2ToDll
//機能　：指定したディレクトリに存在するdl2を処理
//引数　：_argv[0] 処理対象パス（AYA dllからの相対パス指定）
//------------------------------------------------------------------------------
SHIORI_FW.ExecuteDl2ToDll {
	//指定ディレクトリ内のファイルを列挙
	_files = TOLOWER(FENUM(_argv[0]))
	//拡張子dl2のファイルをリストに蓄積する　子ディレクトリ内も再帰的に処理する
	_targets = IARRAY
	foreach _files; _file {
		if SUBSTR(_file, 0, 1) == '\'
			SHIORI_FW.ExecuteDl2ToDll(_argv[0] + _file)
		else {
			_s_path = SPLITPATH(_file)
			if _s_path[3] == '.dl2'
				_targets ,= _s_path[2]
		}
	}

	//拡張子dl2をdllへ名前変更する　旧dllは消去する
	foreach _targets; _target {
		_path = _argv[0] + '\' + _target
		void FDEL(_path + '.dll')
		void FRENAME(_path + '.dl2', _path + '.dll')
	}
}

//******************************************************************************
//インストール済ゴーストリストの構築
//******************************************************************************
On_ghostpathlist{
	if basewarename == 'embryo' || !SHIORI_FW.IGLIST_ACCEL
		ghostpathlist = reference.raw
}
//------------------------------------------------------------------------------
//関数名：On_installedghostname/sakuraname/keroname
//機能　：インストール済ゴースト名通知イベント
//------------------------------------------------------------------------------
On_installedsakuraname {
	SHIORI_FW.BasewareNotifysInstalledSakuraName=1
	installedsakuralist = reference.raw
}
On_installedkeroname {
	SHIORI_FW.BasewareNotifysInstalledKeroName=1
	installedkerolist = reference.raw
}
On_installedghostname {
	if SHIORI_FW.BasewareNotifysInstalledSakuraName && SHIORI_FW.BasewareNotifysInstalledKeroName{
		//Referenceから取得
		installedghostlist = reference.raw
		return
	}
	installedghostlist	 = IARRAY
	installedsakuralist	 = IARRAY
	installedkerolist	 = IARRAY

	//materia、もしくはイベントからの取得が指示されていなければファイル走査で取得する処理を実行
	if basewarename == 'embryo' || !SHIORI_FW.IGLIST_ACCEL
		SHIORI_FW.StructInstalledGhostList
	else
		installedghostlist = reference.raw //fall back
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.StructInstalledGhostList
//機能　：構築
//------------------------------------------------------------------------------
SHIORI_FW.StructInstalledGhostList {
	if !SHIORI_FW.IGLIST_MAX; return

	if !ISVAR('ghostpathlist')
		ghostpathlist=('BASE_PATH\..\..\..\')
	foreach ghostpathlist;_ghostpath{
		SHIORI_FW.StructInstalledGhostListFromGhostPath(_ghostpath)
	}
}
SHIORI_FW.StructInstalledGhostListFromGhostPath{
	//ghostディレクトリ配下のディレクトリを抽出
	_filelist = FENUM(_argv[0])
	_dirlist = IARRAY
	foreach _filelist; _file {
		if '\' _in_ _file; _dirlist ,= _file
	}
	_dirnum = ARRAYSIZE(_dirlist)

	//リスト作成主処理
	for _i = 0; _i < _dirnum; _i++ {
		if SHIORI_FW.IGLIST_MAX != -1 && ARRAYSIZE(installedghostlist) >= SHIORI_FW.IGLIST_MAX
			return
		//descript.txtから情報取得
		_ghostnames = SHIORI_FW.GetGhostNameFromDir(_argv[0] + _dirlist[_i])
		//リストへ追加
		if ARRAYSIZE(_ghostnames) {
			installedghostlist	,= _ghostnames[0]
			installedsakuralist	,= _ghostnames[1]
			installedkerolist	,= _ghostnames[2]
		}
	}
}
//------------------------------------------------------------------------------
//関数名：SHIORI_FW.GetGhostNameFromDir
//機能　：descript.txtからname/sakura.name/kero.nameを取得します
//引数　：_argv[0] 取得対象のゴーストディレクトリ
//------------------------------------------------------------------------------
SHIORI_FW.GetGhostNameFromDir {
	FCHARSET(0)
	_ghostnames = IARRAY
	if FOPEN(_filename = "%(_argv[0])\ghost\master\descript.txt", 'rb'){
		_flag = 0
		_line = FREAD(_filename)
		if _line == -1; _flag = 7
		//若以BOM开头
		elseif SUBSTR(_line, 0, 3) == BOM_UTF8{
			_line = SUBSTR(_line, 3, STRLEN(_line))
			FCHARSET(1)
			void FREOPEN(_filename,'rb')
		}
		while _flag != 7 {
			case CUTSPACE(_line[0]) {
				when 'charset'{
					FCHARSET.string(CUTSPACE(_line[1]))
					void FREOPEN(_filename,'rb')
				}
				when 'name' {
					_ghostnames[0] = CUTSPACE(_line[1])
					_flag++
				}
				when 'sakura.name' {
					_ghostnames[1] = CUTSPACE(_line[1])
					_flag += 2
				}
				when 'kero.name' {
					_ghostnames[2] = CUTSPACE(_line[1])
					_flag += 4
				}
			}
			_line = FREAD(_filename)
			if _line == -1; break
		}

		FCLOSE(_filename)
	}
	FCHARSET.default
	_ghostnames
}

//******************************************************************************
//文 version 3 システム関数 / システム変数の補完
//FUNCTIONEX / SAORI
//******************************************************************************
//------------------------------------------------------------------------------
//関数名：FUNCTIONLOAD
//機能　：SAORIを読み込みます
//引数　：_argv[0]　 対象DLL名
//------------------------------------------------------------------------------
FUNCTIONLOAD {
	//load　エラーなら抜ける　初回のloadならGET Versionを送出する
	_r_load = LOADLIB(_argv[0])
	if !_r_load {
		0
		return
	}
	if _r_load == 1 {
		if SUBSTR(SHIORI_FW.SendGETVersion(_argv[0]), 0, 1) != '2' {
			UNLOADLIB(_argv[0])
			0
			return
		}
		SAORI.DllList ,= _argv[0]
	}
	1
}

//------------------------------------------------------------------------------
//関数名：FUNCTIONEX
//機能　：SAORIを実行します
//引数　：_argv[0]　 対象DLL名
//　　　　_argv[1]～ Argument0～
//------------------------------------------------------------------------------
FUNCTIONEX {
	if !FUNCTIONLOAD(_argv[0]) {
		0
		return
	}

	//リクエスト文字列を作成
	_reqheader = "/
	EXECUTE SAORI/1.0%(C_CRLF)/
	Charset: %(CHARSETLIBEX(_argv[0]))%(C_CRLF)/
	Sender: AYA%(C_CRLF)/
	SecurityLevel: local%(C_CRLF)/
	"
	for _i = 1; _i < _argc; _i++ {
		_reqheader += "Argument%(_i - 1): %(_argv[_i])%(C_CRLF)"
	}
	_reqheader += C_CRLF

	//実行
	SHIORI_FW.RequestLib(_argv[0], _reqheader)

	if var.lib.result != ''
		var.lib.result
	SHIORI_FW.MakeValueexVariable
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.SendGETVersion
//機能　：SAORIへGET Versionを送出します
//引数　：_argv[0] SAORIファイル名
//------------------------------------------------------------------------------
SHIORI_FW.SendGETVersion {
	SHIORI_FW.RequestLib(_argv[0], "/
	GET Version SAORI/1.0%(C_CRLF)/
	Charset: %(CHARSETLIBEX(_argv[0]))%(C_CRLF)/
	Sender: AYA%(C_CRLF2)/
	")

	LIB.STATUSCODE
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.RequestLib
//機能　：SAORIへリクエストを送出し、結果を得ます
//引数　：_argv[0] SAORIファイル名
//　　　　_argv[1] リクエスト文字列
//------------------------------------------------------------------------------
SHIORI_FW.RequestLib {
	LIB.PROTOCOL = ''
	LIB.STATUSCODE = ''

	//リクエスト送出
	_result = REQUESTLIB(_argv[0], _argv[1])

	//結果の解析

	//改行で分割
	_lines = RE_SPLIT(_result, C_CRLF)

	//プロトコル名と結果の取得
	_seppos = STRSTR(_lines[0], ' ', 0)
	if _seppos == -1; return
	LIB.PROTOCOL	= SUBSTR(_lines[0], 0, _seppos)
	LIB.STATUSCODE	= SUBSTR(_lines[0], _seppos + 1, STRLEN(_lines[0]) - _seppos - 1)

	//レスポンスヘッダの取得
	var.lib.key		= IARRAY
	var.lib.value	= IARRAY
	var.lib.result	= ''

	_skip = 1
	foreach _lines; _lin {
		//1行目は飛ばす
		if _skip {
			_skip = 0
			continue
		}

		//キーと値を取得
		_len		 = STRLEN(_lin)
		_pos		 = STRSTR(_lin, ': ', 0)
		var.lib.key	,= (_key = SUBSTR(_lin, 0, _pos))
		_value		 = SUBSTR(_lin, _pos + 2, _len - _pos - 2)
		_valuecv	 = ''

		if var.lib.key == '' {
			break
		}

		if SHIORI_FW.AUTO_DATA_CONVERT {
			if ISINTSTR(_value)
				_valuecv = TOINT(_value)
			elseif ISREALSTR(_value)
				_valuecv = TOREAL(_value)
			else
				_valuecv = REPLACE(_value, C_BYTE1, ',')
		}
		else {
			_valuecv = TOAUTOEX(_value)
		}

		var.lib.value ,= _valuecv
		if _key == 'Result' {
			var.lib.result = _valuecv
		}
	}
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.MakeValueexVariable
//機能　：リクエストヘッダからvalueex*変数を作成します
//------------------------------------------------------------------------------
SHIORI_FW.MakeValueexVariable:void {
	SHIORI_FW.ClearValueexVariable
	valueex = IARRAY
	_sz = ARRAYSIZE(var.lib.key)
	for _i = 0; _i < _sz; _i++ {
		if SUBSTR(_keyname = var.lib.key[_i], 0, 5) == 'Value' {
			_varname = "valueex%(SUBSTR(_keyname, 5, 3))"
			LETTONAME(_varname, var.lib.value[_i])
			valueex[TOINT(SUBSTR(_keyname, 5, 3))] = var.lib.value[_i]
		}
	}
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.ClearValueexVariable
//機能　：valueex*変数を削除します
//------------------------------------------------------------------------------
SHIORI_FW.ClearValueexVariable {
	_valueexList = GETVARLIST('valueex')
	foreach _valueexList; _exname {
		if RE_MATCH(_exname, 'valueex[0-9]+') {
			ERASEVAR(_exname)
		}
	}
	ERASEVAR('valueex')
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.SaoriUnloadAll
//機能　：ロードされているSAORIをすべてunloadします
//------------------------------------------------------------------------------
SHIORI_FW.SaoriUnloadAll {
	foreach SAORI.DllList; _saori { UNLOADLIB(_saori) }

	SAORI.DllList = IARRAY
}

//------------------------------------------------------------------------------
//関数名：SHIORI_FW.RegisterTempVar
//機能　：終了時に削除するグローバル変数を登録します。
//------------------------------------------------------------------------------
SHIORI_FW.RegisterTempVar {
	for _i = 0 ; _i < _argc ; _i++ {
		if ASEARCH(_argv[_i],SHIORI_FW.tempvarname) < 0 {
			SHIORI_FW.tempvarname ,= _argv[_i]
		}
	}
}

//------------------------------------------------------------------------------
//　関数名：SHIORI_FW.RemoveAllTags
//　機能　：全てのさくらスクリプトタグを消去する。
//　引数　：argv0＝テキスト
//------------------------------------------------------------------------------
SHIORI_FW.RemoveAllTags
{
	_text = RE_REPLACE(_argv[0],'\\_{0,2}[a-zA-Z0-9*!&\-+](\d|\[("([^"]|\\")+?"|([^\]]|\\\])+?)+?\])?','')
	_text = REPLACE(_text,'\\','\')
	_text
}

//------------------------------------------------------------------------------
//　関数名：SHIORI_FW.CanTalk
//　機能　：Statusヘッダからしゃべれるかどうかを判定する
//------------------------------------------------------------------------------
SHIORI_FW.CanTalk {
	if 'talking' _in_ status {
		0
		return
	}
	if 'choosing' _in_ status {
		0
		return
	}
	if 'minimizing' _in_ status {
		0
		return
	}
	if 'timecritical' _in_ status {
		0
		return
	}

	1
	return
}

//******************************************************************************
//配列操作
//******************************************************************************
JOIN {
	if _argc <= 2 {
		_argv[0]
		return
	}

	_delim = _argv[_argc - 1]
	_argc--

	_text = _argv[0]
	for _i = 1 ; _i < _argc ; _i++ {
		_text += _delim
		_text += _argv[_i]
	}
	_text
}
REVERSE {
	_a = IARRAY
	for _i = 0 ; _i < _argc ; _i++ {
		_a ,= _argv[_argc-_i-1]
	}
	_a
}
SPLITEX {
	_a = SPLIT(_argv)
	_n = ARRAYSIZE(_a)
	for _i = _n-1 ; _i >= 0 ; _i-- {
		if _a[_i] == '' {
			_a[_i] = IARRAY
		}
	}
	_a
}

MAX {
	_v = _argv[0]
	for _i = 1 ; _i < _argc ; _i++ {
		if _v < _argv[_i] {
			_v = _argv[_i]
		}
	}
	_v
}

MIN {
	_v = _argv[0]
	for _i = 1 ; _i < _argc ; _i++ {
		if _v > _argv[_i] {
			_v = _argv[_i]
		}
	}
	_v
}

AVERAGE {
	_v = 0
	for _i = 0 ; _i < _argc ; _i++ {
		_v += _argv[_i]
	}
	_v / _argc
}

//******************************************************************************
//システムで処理するイベント群
//******************************************************************************
SHIORI_EV.OnUpdateReady : void {
	//OnUpdateReadyならロード中のSAORIをすべてunloadする
	SHIORI_FW.SaoriUnloadAll
}

SHIORI_EV.OnUpdateComplete : void {
	//OnUpdateCompleteならdl2を探す。存在したら同名のdllを削除、dl2はdllにリネームする
	//もっともAYA自身が対象だった場合はどうしようもないが。
	SHIORI_FW.Dl2ToDll
}

SHIORI_EV.OnSurfaceChange : void {
	if reference[2] != '' {
		_r2 = SPLIT(reference[2],',')
		_s = TOINT(_r2[1])
		_c = TOINT(_r2[0])

		if _s >= 0 {
			SHIORI_FW.LastSurface[_c] = _s
			SHIORI_FW.IsVisible[_c] = 1
		}
		else {
			SHIORI_FW.IsVisible[_c] = 0
		}
	}
	else {
		_s0 = TOINT(reference[0])
		_s1 = TOINT(reference[1])

		if _s0 >= 0 {
			SHIORI_FW.LastSurface[0] = _s0
			SHIORI_FW.IsVisible[0] = 1
		}
		else {
			SHIORI_FW.IsVisible[0] = 0
		}

		if _s1 >= 0 {
			SHIORI_FW.LastSurface[1] = _s0
			SHIORI_FW.IsVisible[1] = 1
		}
		else {
			SHIORI_FW.IsVisible[1] = 0
		}
	}
}

SHIORI_EV.On_hwnd : void {
	SHIORI_FW.HWnd = RE_SPLIT(reference[0],'[\x1,]')
	SHIORI_FW.BalloonHWnd = RE_SPLIT(reference[1],'[\x1,]')

	_m = ARRAYSIZE(SHIORI_FW.HWndOld)
	_n = ARRAYSIZE(SHIORI_FW.HWnd)

	if _n < _m {
		_n = _m
	}

	for _i = 0 ; _i < _n ; _i++ {
		SHIORI_FW.HWnd[_i] = TOINT(SHIORI_FW.HWnd[_i])
		SHIORI_FW.HWndOld[_i] = TOINT(SHIORI_FW.HWndOld[_i])
	}

	_refold = reference
	_refold0 = reference0

	for _i = 0 ; _i < _n ; _i++ {
		if SHIORI_FW.HWndOld[_i] != SHIORI_FW.HWnd[_i] {
			reference[0] = _i
			reference0 = _i

			if !SHIORI_FW.HWndOld[_i] {
				SHIORI_FW.OnWindowCreate
			}
			elseif !SHIORI_FW.HWnd[_i] {
				SHIORI_FW.OnWindowDestroy
			}

			SHIORI_FW.HWndOld[_i] = SHIORI_FW.HWnd[_i]
		}
	}

	reference	= _refold
	reference0	= _refold0
}

SHIORI_EV.On_uniqueid : void {
	SHIORI_FW.UniqueID = reference[0]
}

SHIORI_EV.OnNotifySelfInfo : void {
	SHIORI_FW.GhostName = reference[0]
	SHIORI_FW.ShellNameOld = SHIORI_FW.ShellName
	SHIORI_FW.ShellName = reference[3]
	SHIORI_FW.ShellPath = reference[4]
	SHIORI_FW.BalloonNameOld = SHIORI_FW.BalloonName
	SHIORI_FW.BalloonName = reference[5]
	SHIORI_FW.BalloonPath = reference[6]

	ghostname = reference[0]
	selfname = reference[1]
	sakuraname = reference[1]
	keroname = reference[2]

	SHIORI_FW.OnChangeSelfInfo
}

SHIORI_EV.OnNotifyUserInfo : void {
	SHIORI_FW.UserName = reference[0]
	SHIORI_FW.UserNameFull = reference[1]
	SHIORI_FW.UserBirthday = SPLIT(reference[2],',',3)
	for _i = 0 ; _i < 3 ; _i++ {
		SHIORI_FW.UserBirthday[_i] = TOINT(SHIORI_FW.UserBirthday[_i])
	}
	SHIORI_FW.UserSex = reference[3]
}

SHIORI_EV.OnShellChanged : void {
	SHIORI_FW.ShellName = reference[0]
	SHIORI_FW.ShellPath = reference[2]

	SHIORI_FW.OnChangeSelfInfo
}

SHIORI_EV.OnBalloonChange : void {
	SHIORI_FW.BalloonName = reference[0]
	SHIORI_FW.BalloonPath = reference[1]

	SHIORI_FW.OnChangeSelfInfo
}
Get_Full_Defened_Event_Name{
	_event_name=_argv[0]
	if SUBSTR(_event_name,0,2) != 'On'
		_event_name='On_'+_event_name
	if ISFUNC(_event_name)
		_event_name
	elseif ISFUNC('SHIORI_FW.'+_event_name)
		'SHIORI_FW.'+_event_name
	elseif ISFUNC('SHIORI_EV.'+_event_name)
		'SHIORI_EV.'+_event_name
}
Get_Func_Or_Full_Defened_Event_Name{
	if ISFUNC(_argv[0])
		_argv[0]
	else
		Get_Full_Defened_Event_Name(_argv[0])
}
Is_Defened_Event{
	_event_name=_argv[0]
	if SUBSTR(_event_name,0,2) != 'On'
		_event_name='On_'+_event_name
	if ISFUNC(_event_name)
		1
	elseif ISFUNC('SHIORI_FW.'+_event_name)
		1
	elseif ISFUNC('SHIORI_EV.'+_event_name)
		1
	else
		0
}
Is_Defened_Event_Or_Func{
	ISFUNC(_argv[0]) || Is_Defened_Event(_argv[0])
}
SHIORI_EV.On_Has_Event : void {
	_event_name=reference.raw[0]
	if SUBSTR(_event_name,0,2) != 'On'
		_event_name='On_'+_event_name
	_result=0
	if TOLOWER(SHIORI_FW.SecurityLevel) == 'external'
		_event_name='ExternalEvent.'+_event_name
	_result=ISFUNC(_event_name)
	if !_result
		_result=ISFUNC('SHIORI_EV.'+_event_name)
	SHIORI_FW.Make_X_SSTP_PassThru('Result',_result)
}

//---- SHIORI 関連情報 ------------------------------------------------------------------
SHIORI_EV.On_version {
	GETSETTING('coreinfo.version')
}

SHIORI_EV.On_craftman {
	GETSETTING('coreinfo.author')
}

SHIORI_EV.On_craftmanw {
	GETSETTING('coreinfo.author')
}

SHIORI_EV.On_name {
	GETSETTING('coreinfo.name')
}

//******************************************************************************
//デバッグ
//******************************************************************************
SHIORI_EV.On_enable_log : void {
	if TOINT(reference0) {
		SETSETTING('log','SHIORI_PATH/SHIORI_NAME.log')
	}else{
		SETSETTING('log','')
	}
	if !ISVAR('SHIORI_FW.LogMode')
		SHIORI_FW.LogMode = TOINT(reference[0])
	if SHIORI_FW.LogMode != TOINT(reference[0]){
		SHIORI_FW.LogMode = TOINT(reference[0])
		SHIORI_FW.PushNoBreakNotifyResult(OnLogModeChange)
	}
}

SHIORI_EV.On_log_path {
	SHIORI_FW.Path + 'SHIORI_PATH/SHIORI_NAME.log'
}

SHIORI_EV.On_enable_debug : void {
	if !ISVAR('SHIORI_FW.DebugMode')
		SHIORI_FW.DebugMode = TOINT(reference[0])
	if SHIORI_FW.DebugMode != TOINT(reference[0]){
		SHIORI_FW.DebugMode = TOINT(reference[0])
		SHIORI_FW.PushNoBreakNotifyResult(OnDebugModeChange)
	}
}

shiori.OnMemoryError:void{
	SHIORI_FW.PushNoBreakNotifyResult(OnShioriMemoryError)
}
shiori.OnLoopLimit:void{
	SHIORI_FW.PushNoBreakNotifyResult(OnshioriLimit('loop',_argv))
}
shiori.OnCallLimit:void{
	SHIORI_FW.PushNoBreakNotifyResult(OnshioriLimit('call',_argv))
}
shiori.OnMemoryLimit:void{
	SHIORI_FW.PushNoBreakNotifyResult(OnshioriLimit('memory',_argv))
}

//******************************************************************************
//時刻系変数
//******************************************************************************
year	{ GETTIME[0] }
month	{ GETTIME[1] }
day		{ GETTIME[2] }
weekday	{ GETTIME[3] }
hour	{ GETTIME[4] }
ampm	{ hour / 12 }
hour12	{ hour % 12 }
hour12ex{ if hour12 == 0; 12 ; else ; hour12 }
minute	{ GETTIME[5] }
second	{ GETTIME[6] }

systemuptickcount { GETTICKCOUNT }
systemuptime {
	_highcount = GETTICKCOUNT(1)
	if _highcount > 1
		GETTICKCOUNT/1000
	else
		(_highcount*0x40000000 + (GETTICKCOUNT/2))/500
}

systemupsecond { SHIORI_FW.GetTickInfo[3] }
systemupminute { SHIORI_FW.GetTickInfo[1] }
systemuphour { SHIORI_FW.GetTickInfo[2] }

SHIORI_FW.GetTickInfo {
	_result		 = (IARRAY, systemuptime)
	_result		,= _result[0]/60
	_result		,= _result[1]/60
	_result		,= _result[0] - _result[1]*60
	_result[1]	-= _result[2]*60

	_result
}
ghostuptime {
	systemuptime - ghostboottime
}
ghostupmin {
	if !ISVAR('ghostbootmin')
		ghostbootmin = GETSECCOUNT / 60
	(GETSECCOUNT / 60) - ghostbootmin
}
ghostupmin_total {
	ghostupmin_last + ghostupmin
}

//******************************************************************************
//メモリ系変数
//******************************************************************************
memoryload { GETMEMINFO[0] }
memorytotalphys { GETMEMINFO[1] }
memoryavailphys { GETMEMINFO[2] }
memorytotalvirtual { GETMEMINFO[3] }
memoryavailvirtual { GETMEMINFO[4] }

OnFileDropEx{//多文件拖拽支持
	OnFileDrop
}
On_getaistateex{
	On_GetAIStateEX
}
ISSTR{
	GETTYPE(_argv[0])==3&&_argc==1
}
INEVENT{
	_argv[0]==SHIORI_FW.Eventid
}
InNotify{
	REQ.COMMAND == 'NOTIFY'
}
ROUNDEX{
	_num=_argv[0]
	_to=_argv[1]
	if !_to
		_to=1
	_num*=(1.0/_to)
	_num=ROUND(_num)*_to
	_num
}
RENAME_VAR:void{
	if ISVAR(_argv[0])
		LETTONAME(_argv[1],EVAL(_argv[0]))
	ERASEVAR(_argv[0])
}
SWAP_VAR:void{
	_t=EVAL(_argv[1])
	LETTONAME(_argv[1],EVAL(_argv[0]))
	LETTONAME(_argv[0],_t)
}
ABS{
	if _argv[0] < 0
		-_argv[0]
	else
		_argv[0]
}
