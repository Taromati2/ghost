//by steve02081504
FNAME.addpathbefore{
	if SUBSTR(_argv[0],0,1)=='/' || ':' _in_ _argv[0]
		_argv[0]
	else
		_argv[1]+_argv[0]
}
GETCHARSETINDEX{
	case TOLOWER(_argv[0]){
		when 'shift_jis'
			0
		when 'utf-8'
			1
		when 'euc_jp'
			2
		when 'big-5'
			3
		when 'gb-2312'
			4
		when 'euc_kr'
			5
		when 'iso-2022-jp'
			6
		when 'binary'
			126
		when 'osnative'
			127
		others{
			if ISINTSTR(_argv[0])
				TOINT(_argv[0])
			else
				127
		}
	}
}
FCHARSET.string:void{
	FCHARSET(GETCHARSETINDEX(_argv[0]))
}
FCHARSET.default:void{
	FCHARSET.string(GETSETTING('charset.output'))
}
FREOPEN{
	_tmp = FTELL(_argv[0])
	FCLOSE(_argv[0])
	void FOPEN(_argv[0],_argv[1])
	FSEEK(_argv[0],_tmp,'start')
}
ISDIR{
	FATTRIB(_argv[0])[2]
}
FILEEXIST{
	if ISSTR(_argv[0])
		FATTRIB(_argv[0])!=-1
	else
		0
}
FWRITE_WITH_{
	FWRITE2(_argv[1],_argv[2]+_argv[0])
}
FWRITE_WITH_LF{
	FWRITE2(_argv[0],_argv[1]+C_LF)
}
FWRITE_WITH_CR{
	FWRITE2(_argv[0],_argv[1]+C_CR)
}
GET_ENDLINE.file_was_opened{
	_file=_argv[0]
	void FSEEK(_file,0,'start')
	if FREAD(_file) > 0{
		void FSEEK(_file,-2,'current')
		_endline=FREADBIN(_file,2)
		if _endline == C_CRLF{
			C_CRLF
		}
		elseif C_LF _in_ _endline{
			C_LF
		}
		elseif C_CR _in_ _endline{
			C_CR
		}
		else{
			''
		}
	}
	else
		''
	void FSEEK(_file,0,'start')
}
GET_ENDLINE{
	_file=_argv[0]
	if FOPEN(_file,'rb'){
		GET_ENDLINE.file_was_opened(_file)
		void FCLOSE(_file)
	}
}
DELDIR{
	_attrib=FATTRIB(_argv[0])
	if _attrib!=-1{
		if _attrib[2]{
			_d=FENUM(_argv[0])
			foreach _d;_i{
				void DELDIR(_argv[0]+'\'+_i)
			}
			void RMDIR(_argv[0])
		}else{
			void FDEL(_argv[0])
		}
		1
	}else{
		0
	}
}
DIRCOPY{
	MKDIR(_argv[1])
	RUNCMD('XCOPY "'+_argv[0]+'" "'+_argv[1]+'" /Q /H /R /Y /J /K /V /I /E')
	if FATTRIB(_argv[0])[3]
		void FHIDDEN(_argv[1])
	if FATTRIB(_argv[1])==-1
		0
	else
		1
}
DIRSync{
	RUNCMD('Robocopy "'+_argv[0]+'" "'+_argv[1]+'" /MIR /NJS /NP /SL')
}
FHIDDEN{
	RUNCMD('attrib +H "'+_argv[0]+'"')
}
FUNHIDDEN{
	RUNCMD('attrib -H "'+_argv[0]+'"')
}
SPLITPATH.roughly{
	_p=SPLITPATH(_argv[0])
	(_p[0]+_p[1],_p[2]+_p[3])
}
FULLNAMEFCOPY{
	_h=FATTRIB(_argv[0])[3]
	if _h
		void FUNHIDDEN(_argv[0])
	_p1=SPLITPATH.roughly(_argv[1])
	_p2=SPLITPATH.roughly(_argv[0])
	void FCOPY(_argv[0],_p1[0])
	void FRENAME(_p1[0]+_p2[1],_argv[1])
	void FDEL(_p1[0]+_p2[1])
	if _h{
		void FHIDDEN(_argv[0])
		void FHIDDEN(_argv[1])
	}
	if FATTRIB(_argv[1])==-1
		0
	else
		1
}
ISFILEEND{
	FTELL(_argv[0])==FSIZE(_argv[0])
}
ISNOTFILEEND{
	FTELL(_argv[0])!=FSIZE(_argv[0])
}
GETFILELINENUM{
	_file=_argv[0]
	_linenum=0
	if FOPEN(_file,'rb'){
		while ISNOTFILEEND(_file){
			_linenum++
			void FREAD(_file)
		}
	}
	FCLOSE(_file)
	_linenum
}
//mklink
MAKEFILELINK{//MAKEFILELINK('a.txt','aya.txt')
	RUNCMD('mklink /h "'+_argv[0]+'" "'+_argv[1]+'"')
}
MAKEDIRLINK{
	RUNCMD('mklink /j "'+_argv[0]+'" "'+_argv[1]+'"')
}
MAKELINK{
	if ISDIR(_argv[1])
		MAKEDIRLINK(_argv)
	else
		MAKEFILELINK(_argv)
}
//GETENV
GETENVEX{
	SPLIT(GETENV(_argv[0]),';')
}
//get program path
GetProgramPath.base{
	_p=GETENVEX('PATH')
	foreach _p;_i{
		if FILEEXIST(_i+'/'+_argv[0]){
			_i+'/'+_argv[0]
			return
		}
	}
	''
}
GetProgramPath{
	_p=GETENVEX('PATHEXT')
	foreach _p;_i{
		_v=GetProgramPath.base(_argv[0]+_i)
		if _v!=''
			return _v
	}
	''
}
//git
GHOST.INgit{
	_dir='.'
	while FILEEXIST(_dir){
		if FILEEXIST(_dir+'/.git/config'){
			1
			return
		}
		else{
			_dir+='/..'
		}
	}
	0
}
GHOST.IsGitPath{
	FILEEXIST(GETSETTING('coreinfo.path')+'../.git/config')
}
GHOST.INtempDir{
	'\AppData\Local\Temp\' _in_ GETSETTING('coreinfo.path')
}
GHOST.IsSelfPath{
	REPLACE(_argv[0],'/','\') _in_ GETSETTING('coreinfo.path')
}
git.GetCommitID{
	_v=RUNCMD('git rev-parse --short HEAD')
	if _v!=0{
		RUNCMD('git gc')// common fix of the problem
		_v=RUNCMD('git rev-parse --short HEAD')
	}
	if _v!=0
		0
	else
		CMD.OutPut.RemoveLastLineBreak
}
//DUMP
DUMP_to:void{
	_file=_argv[0]
	_argv[0]=IARRAY
	FOPEN(_file,'ab')
	FWRITE_WITH_LF(_file,_argv)
	FCLOSE(_file)
}
DUMP_references_to:void{
	_i=0
	_file=_argv[0]
	FOPEN(_file,'ab')
	FWRITE_WITH_LF(_file,'ID : '+SHIORI_FW.Eventid)
	while ISVAR('reference'+_i){
		FWRITE_WITH_LF(_file,"reference%_i : "+EVAL("reference%_i"))
		_i++
	}
	FCLOSE(_file)
}
InVM{
	if FILEEXIST('SAORI_PATH/VMDetect.dll')
		CALLSAORI('VMDetect')
	else
		1
}
GETSIZEUNIT{
	_table=('B','KB','MB','GB','TB','PB','EB','ZB','YB')
	_size=_argv[0]
	_i=0
	while _size>1024{
		_size/=1024
		_i++
	}
	_table[_i]
}
UNITSIZE{
	_table=('B','KB','MB','GB','TB','PB','EB','ZB','YB')
	_size=_argv[0]
	_i=0
	while _size>1024{
		_size/=1024
		_i++
	}
	_size+_table[_i]
}
