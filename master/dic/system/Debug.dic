//by steve02081504
OnAnchorSelect{
	BUGNow("AnchorSelect\_q“%(REPLACE(reference0,'\','\\'))”\_q被触发了\w9\w9\n但是目前Taromati并不支持任何AnchorSelect")
}
OnReloadShiori{
	if mode == '1'
		"\1\s[%(specialmode != 'mealtime')10]唔"
	else
		'\0\s[0]嗯'
	--
	'…\n\![reload,shiori]重新讀取SHIORI……'
}
SakuraScriptArgConverter{
	'"'+REPLACE(TOSTR(_argv[0]),'"','""')+'"'
}

GETTYPE.to_string{
	case _argv[0]{
		when 1
			'整数'
		when 2
			'实数'
		when 3
			'字串'
		when 4
			'泛用阵列'
		others
			'内部错误'
	}
}
ValueTOstring{
	if _argc > 1{
		_t='('
		foreach _argv;_i{
			_t+=ValueTOstring(_i)+','
		}
		RE_REPLACE(_t,'\,$',')')
	}
	elseif ISSTR(_argv[0]){
		if '"' !_in_ _argv[0]
			'"'+_argv[0]+'"'
		elseif "'" !_in_ _argv[0]
			"'"+_argv[0]+"'"
		else
			REPLACE(RE_REPLACE(RE_REPLACE('"'+REPLACE(_argv[0],'"','"+'+"'"+'"'+"'"+'+"')+'"','^\"\"\+',''),'\+\"\"$',''),'"'+"'+'"+'"','')
	}
	elseif TOSTR(_argv[0])==''
		'NULL'
	else
		TOSTR(_argv[0])
}
ValueTOstring.SakuraScript{
	REPLACE(ValueTOstring(_argv),'\','\\')
}
GetVarValue{
	EVAL(_argv[0])
}
GetVarValue.string{
	ValueTOstring(GetVarValue(_argv[0]))
}
GetVarValue.SakuraScript{
	REPLACE(GetVarValue.string(_argv[0]),'\','\\')
}
GetGlobalDefine{
	PROCESSGLOBALDEFINE(_argv[0])
}
GetGlobalDefine.SakuraScript{
	REPLACE(GetGlobalDefine(_argv[0]),'\','\\')
}
GetGlobalDefine.SakuraArg{
	SakuraScriptArgConverter(GetGlobalDefine(_argv[0]))
}

OnSakuraScript{
	if _argv[0]
		reference.raw[0] = _argv[0]
	if _argv[1]
		reference1 = _argv[1]
	//for test:'%username，\\!VAR_PATH'
	if reference1 != 'no_defineprocess'{
		if reference1 != 'no_convert'{
			if reference1 != 'force_run'{
				if ('\!' _in_ reference.raw[0] || '\-' _in_ reference.raw[0]){
					'\0\s[100]/
					警告\w9\w9：此Sakura Script可能含有较危险操作\n/
					\q[◇确认執行,OnSakuraScript,'+SakuraScriptArgConverter(reference.raw[0])+',force_run]\n/
					\q[◇无用,Cancel]\n/
					'
					return
				}
			}
			if '%' _in_ reference.raw[0]{
				'\0\s[100]/
				这段Sakura Script中似乎含有aya转义符\w9\n/
				需要转义么？\w9\n/
				\q[◇转义執行,OnSakuraScript.Forment,'+SakuraScriptArgConverter(reference.raw[0])+']\n/
				\q[◇直接執行,OnSakuraScript,'+SakuraScriptArgConverter(reference.raw[0])+',no_convert]\n/
				\q[◇无用,Cancel]\n/
				'
				return
			}
		}
		if reference.raw[0]!=PROCESSGLOBALDEFINE(reference.raw[0]){
			'\0\s[100]/
			这段Sakura Script中似乎含有全局define\w9\n/
			需要处理么？\w9\n/
			\q[◇处理執行,OnSakuraScript,'+SakuraScriptArgConverter(PROCESSGLOBALDEFINE(reference.raw[0]))+',no_defineprocess]\n/
			\q[◇直接執行,OnSakuraScript,'+SakuraScriptArgConverter(reference.raw[0])+',no_defineprocess]\n/
			\q[◇无用,Cancel]\n/
			'
			return
		}
	}
	reference.raw[0]
}
OnSakuraScript.Forment{
	OnSakuraScript(EVAL('"'+reference.raw[0]+'"'),'no_convert')
}

On_ShioriEcho.GetName:void {
	SHIORI_FW.Make_X_SSTP_PassThru('GhostName',ghostname)
	SHIORI_FW.Make_X_SSTP_PassThru('UserName',username)
}
On_ShioriEcho {
	ClearShioriEchoVar
	case CUTSPACE(reference0){
		when 'reload'{
			OnReloadShiori
			ShioriEcho.Special='重载中'
		}
		when 'errorlog'{
			OnErrorLog
			ShioriEcho.Result=GETERRORLOG
		}
		others{
			if RE_GREP(reference0,'^\s*help\s+'){
				ShioriEcho.Special=Get_AYA_Function_Info(RE_REPLACE(reference0,'^\s*help\s+',''))
				if !ShioriEcho.Special
					ShioriEcho.Special='不是系统函数'
			}
			else{
				OnCalculateVar
				--
				IgnoreChoiceTimeout
			}
		}
	}
}
On_ShioriEcho.TabPress{
	_lastname=RE_REPLACE(reference0,'^[\s\S]*[\[\]\(\)\+\-\*\/\=\'+"'"+'\" ]','')
	_possible_names=(GETVARLIST(_lastname),GETFUNCLIST(_lastname),GETSYSTEMFUNCLIST(_lastname),ARRAY.BeginAs(_lastname,'reload','errorlog'))
	if ARRAYSIZE(_possible_names){
		_name_after_tab=_possible_names[reference1%ARRAYSIZE(_possible_names)]
		SHIORI_FW.Make_X_SSTP_PassThru('Command',RE_REPLACE(reference0,_lastname+'$',_name_after_tab))
	}
}
On_ShioriEcho.GetResult {
	if ISVAR('ShioriEcho.Special'){
		SHIORI_FW.Make_X_SSTP_PassThru('Special',ShioriEcho.Special)
		if !ShioriEcho.Special
			BUGNow('ShioriEcho.Special内容为空')
	}
	else{
		if ISVAR('ShioriEcho.Result'){
			SHIORI_FW.Make_X_SSTP_PassThru('Result',ValueTOstring(ShioriEcho.Result))
			SHIORI_FW.Make_X_SSTP_PassThru('Type',GETTYPE.string((ShioriEcho.Result)))
		}
	}
	ClearShioriEchoVar
}
ClearShioriEchoVar:void {
	ERASEALLVARBEGINAS('ShioriEcho.')
}
OnCalculateVar.Cancel{
	ShioriEcho.Special='已取消求值'
}
OnCalculateVar.ToSakuraScript{
	ShioriEcho.Special='转为SakuraScript执行'
	OnSakuraScript(reference0)
}

OnCalculateVar{
	if _argv[0]
		reference0 = _argv[0]
	if _argv[1]
		reference1 = _argv[1]
	reference0 = TOSTR(reference0)
	if !CUTSPACE(reference0){
		if INEVENT('On_ShioriEcho')
			ShioriEcho.Special='请键入表达式'
		else
			'\![open,inputbox,OnCalculateVar,0,1000-7]'//玩梗
		return
	}
	//for test:'Reset，VAR_PATH'
	_var = RE_REPLACE(reference0,'\s*[\[,\+=\*\-/%][\s\S]*$','')
	_func = RE_REPLACE(reference0,'\s*[\(\[][\s\S]*$','')
	if reference1 != 'warning_func_run'{
		if reference1 != 'no_defineprocess'{
			if reference1 != 'force_run'{
				if reference1 != 'no_convert'{
					if RE_GREP(reference0,'[，（）‘’“”！、？。【】]'){
						if mode == '1'
							"\1\s[%(specialmode != 'mealtime')11]全角 -> 半角？\n"
						else
							'\0\s[20]转换表达式中的全角符号为半角？\n'
						--
						'\q[◇好,OnCalculateVar.CharConverter,'+SakuraScriptArgConverter(reference0)+']\n/
						\q[◇直接执行,OnCalculateVar,'+SakuraScriptArgConverter(reference0)+',no_convert]\n/
						\q[◇算了,Cancel,with_func,OnCalculateVar.Cancel]\n/
						'
						return
					}
				}
				if !ISEVALUABLE(reference0){
					if mode == '1'
						"\1\s[%(specialmode != 'mealtime')10]这不是可行的表达式\w9\w9\n/
						\s[%(specialmode != 'mealtime')11]细心点啊。"
					else
						'\0\s[3]这个\w9…\w9…\s[8]\n不是可行的表达式啊\n'
					return
				}
				elseif !ISVAR(_var) && !ISFUNC(_func) && GETTYPE(TOAUTOEX(_var)) == 3{
					if mode == '1'
						"\1\s[%(specialmode != 'mealtime')10]没这个名字\n"
					else
						'\0\s[3]没有这个变量或函数……\n'
					--
					'/
					\q[◇仍然执行,OnCalculateVar,'+SakuraScriptArgConverter(reference0)+',force_run]\n/
					\q[◇改作Sakura Script執行,OnCalculateVar.ToSakuraScript,'+SakuraScriptArgConverter(reference0)+']\n/
					\q[◇算了,Cancel,with_func,OnCalculateVar.Cancel]\n/
					'
					return
				}
			}
			if reference0 != PROCESSGLOBALDEFINE(reference0){
				if mode == '1'
					"\1\s[%(specialmode != 'mealtime')10]有全局define\n"
				else
					'\0\s[20]处理表达式中的全局define么？\n'
				--
				'/
				\q[◇处理執行,OnCalculateVar,'+SakuraScriptArgConverter(PROCESSGLOBALDEFINE(reference0))+',no_defineprocess]\n/
				\q[◇直接執行,OnCalculateVar,'+SakuraScriptArgConverter(reference0)+',no_defineprocess]\n/
				\q[◇算了,Cancel,with_func,OnCalculateVar.Cancel]\n/
				'
				return
			}
		}
		if (RE_GREP(_func,'^Reset') || _func == 'OnFirstBoot' || _func == 'MAGICLOAD' || _func == 'LOADVAR' || _func == 'RESTOREVAR' || _func == 'OnKikkaReset'){
			if mode == '1'
				"\1\s[%(specialmode != 'mealtime')11]\w9…\w9…\w9\n确认？\n"
			else
				'\0\s[7]这是一个危险函数\n\w9\w9\s[8]确认执行吗？\n'
			--
			'/
			\q[◇仍然执行,OnCalculateVar,'+SakuraScriptArgConverter(reference0)+',warning_func_run]\n/
			\q[◇算了,'
			--
			if _func == 'OnFirstBoot' || _func == 'MAGICLOAD' || RE_GREP(_func,'^Reset') || _func == 'OnKikkaReset'
				'Thanks'
			else
				'Cancel'
			--
			',with_func,OnCalculateVar.Cancel]/
			'
			return
		}
	}
	else{
		if mode == '1'
			"\1\s[%(specialmode != 'mealtime')10]哦。"
		else
			'\0\s[3]好的\w9…\w9…\w9…\n'
	}
	--
	{
		if mode == '1'
			"\1\s[%(specialmode != 'mealtime')10]\b[2]『\_q%(REPLACE(reference0,'\','\\'))\_q』，结果是\n"
		else
			'\0\s[0]表达式『\_q'+REPLACE(reference0,'\','\\')+'\_q』的执行结果为：\n'
		--
		_Result=EVAL(reference0)
		'\_q'
		--
		if _Result == ''
			'什么都没有'
		else
			REPLACE(TOSTR(_Result),'\','\\')
		--
		_Type=GETTYPE.string((_Result))
		'\n/
		类型：'+_Type
		--
		'\_q\n/
		\q[◇复制结果,OnCopy,'+SakuraScriptArgConverter(_Result)+']\n/
		\q[◇复制表达式,OnCopy,'+SakuraScriptArgConverter(reference0)+']\n/
		\q[◇结果作Sakura Script執行,OnSakuraScript,'+SakuraScriptArgConverter(_Result)+']\n/
		'
		--
		'\n/
		\q[◇求值下一个,OnCalculateVar]\n/
		\q[◇无用,Cancel]\n/
		'
		--
		ShioriEcho.Result=_Result
	}
}
OnCalculateVar.CharConverter{
	reference0=REPLACE(reference0,'，',',')
	reference0=REPLACE(reference0,'（','(')
	reference0=REPLACE(reference0,'）',')')
	reference0=REPLACE(reference0,'‘',"'")
	reference0=REPLACE(reference0,'’',"'")
	reference0=REPLACE(reference0,'“','"')
	reference0=REPLACE(reference0,'”','"')
	reference0=REPLACE(reference0,'！','!')
	reference0=REPLACE(reference0,'、','\')
	reference0=REPLACE(reference0,'？','?')
	reference0=REPLACE(reference0,'。','.')
	reference0=REPLACE(reference0,'【','[')
	reference0=REPLACE(reference0,'】',']')
	OnCalculateVar(reference0)
}
//调试反应by steve02081504
OnDebugModeChange{
	if mode == '1'
		"\1\s[%(specialmode != 'mealtime')10]唔…\w9\w9\n"
	else
		'\0\s[6]嗯…\w9\w9\s[0]\n'
	--
	'shiori调试模式'
	--
	if mode == '0'
		'已'
	--
	if SHIORI_FW.DebugMode
		'打开'
	else
		'关闭'
	--
	if mode == '1'
		'了。'
	--
	'\n'
	--
	if SHIORI_FW.DebugMode{
		if !FILEEXIST('VAR_PATH/NoMatchingEvent.txt')
			OnNoMatchingEvent.DumpedList=IARRAY
		void MKDIR('VAR_PATH')
		if AutoUpdate
			'/
			\q[◇禁用自动更新,Onset,AutoUpdate,0]\n/
			\q[◇无用,Cancel]\n/
			'
	}
	if !SHIORI_FW.DebugMode && !AutoUpdate
		'/
		\q[◇开启自动更新,Onset,AutoUpdate,1]\n/
		\q[◇无用,Cancel]\n/
		'
}
OnLogModeChange{
	if SHIORI_FW.LogMode{
		if mode == '1'
			"\1\s[%(12+99*(specialmode != 'mealtime'))]注意下，\w9\w9"
		else
			'\0\s[100]警告：\w9\w9'
	}else{
		if mode == '1'
			"\1\s[%(specialmode != 'mealtime')10]唔…\w9\w9\n"
		else
			'\0\s[6]嗯…\w9\w9\s[0]\n'
	}
	--
	'shiori log'
	--
	if mode == '0' && !SHIORI_FW.LogMode
		'已'
	--
	if SHIORI_FW.LogMode
		'开启'
	else
		'关闭'
	--
	if mode == '1'
		'了。'
	elseif SHIORI_FW.LogMode
		'中'
}
DebugModeChanged{
	if ISINTSTR(_argv[0]) || ISINTEGER(_argv[0]){
		/*
		if TOINT(_argv[0])
			'\![open,shioridebugmode]'
		else
			'\![close,shioridebugmode]'
		*/
		SHIORI_FW.DebugMode = TOINT(_argv[0])
		'\0\s[100]注意：\w9\w9此功能的支持仅处于测试阶段，\w9切换效果持续到下次shiori载入为止\w9\w9\n/
		如需永久打开调试模式，请按文档进行ssp设置\x'
		--
		OnDebugModeChange
	}
}
//调试：无对应事件反应by steve02081504
OnNoMatchingEvent{
	if !SHIORI_FW.DebugMode || !setting.OnNoMatchingEventAlarm
		return
	_dumped=INARRAY(OnNoMatchingEvent.DumpedList,SHIORI_FW.Eventid)
	_ignoring=INARRAY(OnNoMatchingEvent.IgnoreList,SHIORI_FW.Eventid)
	if !(_dumped&&_ignoring){
		"\![set,choicetimeout,1000]\%(mode)\s[%(mode)0]\b[%(mode+1)]"
		--
		if !_dumped{
			DUMP_references_to('VAR_PATH/NoMatchingEvent.txt')
			OnNoMatchingEvent.DumpedList,=SHIORI_FW.Eventid
			--
			"\_q未注册的事件“%(SHIORI_FW.Eventid)”已被写入“VAR_PATH/NoMatchingEvent.txt”\_q\n"
		}
		elseif !_ignoring{
			"\_q未注册的事件“%(SHIORI_FW.Eventid)”被触发了\_q\n"
		}
		--
		"/
		\q[◇查看事件文档,OnUrlOpen,%(Get_UKADOC_ofEvent(SHIORI_FW.Eventid))]\n/
		\q[◇永久忽略此事件,OnNoMatchingEvent.Ignore,%(SHIORI_FW.Eventid)]\n/
		\q[◇将此事件加入TODO并永久忽略,OnNoMatchingEvent.WrtieToTODOandIgnore,%(SHIORI_FW.Eventid)]\n/
		\q[◇无用,Cancel]\n/
		"
		--
		IgnoreChoiceTimeout
	}
}
OnNoMatchingEvent.WrtieToTODOandIgnore{
	OnNoMatchingEvent.Ignore(reference0)
	DUMP_to('VAR_PATH/UnFinishedEvent.txt',reference0)
	"\%(mode)\s[%(mode)0]\b[%(mode+1)]/
	\_q事件“%(reference0)”已被写入“VAR_PATH/UnFinishedEvent.txt”\_q"
}
OnNoMatchingEvent.Ignore{
	OnNoMatchingEvent.IgnoreList,=reference0
	_index=ARRAYSIZE(SHIORI_FW.DelayNotifyResults)
	while _index{
		_index--
		if reference0 _in_ SHIORI_FW.DelayNotifyResults[_index]
			SHIORI_FW.DelayNotifyResults[_index]=IARRAY
	}
}
GetResourceEventRealName{
	if SUBSTR(_argv[0],0,3) == 'On_'
		SUBSTR(_argv[0],3,STRLEN(_argv[0]))
	else
		_argv[0]
}
IsResourceEvent{
	if SUBSTR(_argv[0],0,3) != 'On_'{
		0
		return
	}
	case SUBSTR(_argv[0],3,STRLEN(_argv[0])){
		when 'basewareversion','hwnd','uniqueid','capability','ownerghostname','otherghostname','installedghostname','installedshellname','installedballoonname','installedheadlinename','installedplugin','configuredbiffname','ghostpathlist','balloonpathlist','headlinepathlist','pluginpathlist','calendarskinpathlist','calendarpluginpathlist','rateofusegraph','inputbox.autocomplete'
			0
		others
			1
	}
}
Get_UKADOC_ofEvent{
	'http://ssp.shillest.net/ukadoc/manual/'
	--
	if IsResourceEvent(_argv[0])
		'list_shiori_resource'
	else
		'list_shiori_event'
	--
	_argv[0]=GetResourceEventRealName(_argv[0])
	".html#%(_argv[0])"
}
//来自Dummy-47
Get_AYA_Function_Info{
	if ISFUNC(_argv[0])!=2
		return
	if QuickStartVersion{
		if INEVENT('On_ShioriEcho')
			NeedUpdateText
		else
			return
	}
	else{
		_data_file='DATA_PATH/debug/aya_func_info.txt'
		_result=''
		_fnucname=_argv[0]
		FCHARSET(1)
		if FOPEN(_data_file,'r'){
			while ISNOTFILEEND(_data_file){
				if _fnucname==FREAD(_data_file){
					_result=FREAD(_data_file)
					while RE_GREP(_result,'/$'){
						_result=SUBSTR(0,STRLEN(_result)-1)
						_result+=FREAD(_data_file)
					}
				}
			}
			FCLOSE(_data_file)
			FCHARSET.default
		}
		else{
			'记录文件丢失'
			return
		}
		if _result
			_result
		else
			'文档未记录'
	}
}
/*
On_Get_AYA_Function_Info_Test{
	_l=GETSYSTEMFUNCLIST()
	_txt='文档未记录的aya底层函数有：\n'
	foreach _l;_i{
		if Get_AYA_Function_Info(_i)=='文档未记录'
			_txt+=_i+'\n'
	}
	_txt
}
/*
*/
OnUpdateSHIORICore{
	if FILEEXIST('SHIORI_PATH\update_aya.bat'){
		'\![open,file,SHIORI_PATH\update_aya.bat,'+SakuraScriptArgConverter(reference0)+']'
	}
	else{
		'\0\s[0]未找到update_aya.bat，请前往github仓库补全开发文件'
	}
}
OnOpenDicWithLineNum{
	if !_argv[0]
		_argv[0] = reference0
	if !_argv[1]
		_argv[1] = reference1
	'\![open,editor,'+SakuraScriptArgConverter(_argv[0])+','+_argv[1]+']'
}
OnErrorLog{
	ErrorList.Gene
	_i=0
	if mode == '1'
		"\1\s[%(specialmode != 'mealtime')10]"
	--
	_txt='\![set,autoscroll,disable]'
	if mode == '1'
		_txt+='\b[2]喏，\w9这些：'
	else
		_txt+='以下文件有误：'
	--
	_txt+='\n\_q'
	while ErrorList.filename[_i]{
		_txt+='\q[◇'
		if _t=SPLITPATH(ErrorList.filename[_i])
			_txt+=_t[2]+_t[3]
		else
			_txt+=ErrorList.filename[_i]
		_txt+=',OnOpenDicWithLineNum,'+SakuraScriptArgConverter(ErrorList.filename[_i])+','+ErrorList.linenum[_i]+']'
		if ErrorList.linenum[_i]
			_txt+='行'+ErrorList.linenum[_i]
		_txt+='：'+REPLACE(ErrorList.Info[_i],'\','\\')+'\n'
		_i++
	}
	_txt+='\_q\n/
	\q[◇重新载入SHIORI,OnReloadShiori]\n/
	\q[◇结束,Cancel]\n/
	'
	if !ErrorList.filename
		_txt='没有错误记录'
	ClearErrorListVar
	_txt
}
OnEventAdd{
	"/
	这个事件是？\n/
	\q[◇调试用事件,OnEventAdd.ToDic,./dic/system/Debug.dic,%(reference0)]\n/
	\q[◇环境反应事件,OnEventAdd.ToDic,./dic/system/event_response.dic,%(reference0)]\n/
	\q[◇其他事件,OnEventAdd.ToDic,./dic/other/Other.dic,%(reference0)]\n/
	\q[◇让我看看事件文档,OnUrlOpen,%(Get_UKADOC_ofEvent(reference0))]\n/
	"
}
OnEventAdd.ToDic{
	_file=reference0
	_event_name=reference1
	FCHARSET(1)
	_linenum=GETFILELINENUM(_file)
	if FOPEN(_file,'ab'){
		FWRITE_WITH_LF(_file,_event_name+'{')
		FWRITE_WITH_LF(_file,'	'+'BUGNow('+"'函数未完成'"+')')
		FWRITE_WITH_LF(_file,'}')
	}
	FCLOSE(_file)
	FCHARSET.default
	OnOpenDicWithLineNum(_file,_linenum+2)
}
On_yatamaOpen{
	SETTAMAHWND(reference0)
	SHIORI_FW.Make_X_SSTP_PassThru('Tittle','yatame test: Taromati2')
	//SHIORI_FW.Make_X_SSTP_PassThru('Icon',GetSelfIconFullPath)
	'yatama打开了'
}
On_yatamaExit{
	'yatama结束了'
	SETTAMAHWND(0)
}
